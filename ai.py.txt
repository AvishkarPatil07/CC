**********BFS UNINFORMED SEARCH TECHNIQUES********
graph = {
    '10': ['2', '3'],
    '3': ['3'],
    '2': ['4'],
    '4': ['2', '3'],

}

visited = []  # List for visited nodes.
queue = []  # Initialize a queue


def bfs(visited, graph, node):  # function for BFS
    visited.append(node)
    queue.append(node)

    while queue:  # Creating loop to visit each node
        m = queue.pop(0)
        print(m, end=" ")

        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)


# Driver Code
print("Following is the Breadth-First Search")

bfs(visited, graph, '10')  # function calling




**********MIN MAX EXP 6*********
import math
import random
def fun_Minmax(cd,node,maxt,scr,td):
    if(cd==td):
        return scr[node]
    if(maxt):
        return max (fun_Minmax(cd+1,node*2,False,scr,td),
               fun_Minmax(cd+1,node*2+1,False,scr,td))
    else:
        return min(fun_Minmax(cd+1,node*2,True,scr,td),
             fun_Minmax(cd+1,node*2+1,True,scr,td))
scr=[]
x=int(input("Enter total number of leaf node="))
for i in range (x):
    y = int (input("enter leaf values:"))
    scr.append(y)
td=math.log(len(scr),2)
cd=int(input("enter current depth values="))
node=int(input("enter node value:"))
maxt=True
print("the answer is :",end="")
answer=fun_Minmax(cd,node,maxt,scr,td)
print(answer)

************************************prolog EXP3***************************************************
likes(yash,travling).
likes(yash,eating).
likes(yash,fruit).
likes(yash,orange).

FACTORIAL

factorial(0,F,F).

factorial(N,A,F):-
    N>0,
    A1 is N*A,
    N1 is N-1,
    factorial(N1,A1,F).

MAX OF TWO

max_of_two(X,Y,X):-X>=Y.
max_of_two(X,Y,Y):-X<Y.
list_max_elem([X],X).
list_max_elem([X,Y|Rest],Max):-
    list_max_elem([Y|Rest],MaxRest),
    max_of_two(X,MaxRest,Max).

NUMBER OF ELEMENT

count([],0).
count([H|Tail],N):-
count(Tail,N1),(number(H)->N is N1+1;N=N1).

******************************************************EXP 4  BFS*************************************************
graph ={
    'A ':['B ','C '],
    'B ':['D ','E '],
    'C ':['F '],
    'D ':[],
    'E ':['F '],
    'F ':[]
}
visited=[]
queue=[]

def bfs(visited,graph,node):
    visited.append(node)
    queue.append(node)
    
    while queue:
        s=queue.pop(0)
        print(s,end="")
    
        for neighbour in graph[s]:
           if neighbour not in visited:
               visited.append(neighbour)
               queue.append(neighbour)
bfs(visited,graph,'A ')

*************************************************exp7*************************************************
SuccList = {'A': [['B', 3], ['C', 2]], 'B': [['D', 2], ['E', 3]], 'C': [['F', 2], ['G', 4]], 'D': [['H', 1], ['I', 99]],
            'F': [['J', 99]], 'G': [['K', 99], ['L', 3]]}
Start = 'A'
Closed = list()


def MOVEGEN(N):
    New_list = list()
    if N in SuccList.keys():
        New_list = SuccList[N]

        return New_list


def SORT(L):
    L.sort(key=lambda x: x[1])
    return L


def heu(Node):
    return Node[1]


def APPEND(L1, L2):
    New_list = list(L1) + list(L2)
    return New_list


def Hill_Climbing(Start):
    global Closed
    N = Start
    CHILD = MOVEGEN(N)
    SORT(CHILD)
    N = [Start, 5]
    print("\nStart=", N)
    print("Sorted Child List=", CHILD)
    newNode = CHILD[0]
    CLOSED = [N]

    while heu(newNode) <= heu(N):
        print("\n---------------------")
        N = newNode
        print("N=", N)
        CLOSED = APPEND(CLOSED, [N])
        CHILD = MOVEGEN(N[0])
        SORT(CHILD)
        print("Sorted Child List=", CHILD)
        print("CLOSED=", CLOSED)
        newNode = CHILD[0]

    Closed = CLOSED


Hill_Climbing(Start)

************************************************WATER JUG PROBLEM*************************************

def pour(jug1,jug2):
    max1,max2,fill=5,7,4
    print("%d\t%d"%(jug1,jug2))
    if jug2 is fill:
        return
    elif jug2 is max2:
        pour(0,jug1)
    elif jug1 !=0 and jug2 is 0:
        pour(0,jug1)
    elif jug1 is fill:
        pour(jug1,0)
    elif jug1<max1:
        pour(max1,jug2)
    elif jug1 <(max1-jug2):
        pour(0,(jug1+jug2))
    else:
         pour(jug1-(max2-jug2),(max2-jug2)+jug2)
         
print ("Jug1\t Jug2")
pour(0,0)

********************************************* TRAVELLING SALSEMAN ***********************************************

def travellingSalespersonProblem(graph,s):
    vertex=[]
    for i in range(v):
        if i != s:
            vertex.append(i)
    min_path=maxsize
    next_permutation=permutations(vertex)
    for i in next_permutation:
        current_pathweight=0
        k=s
        for j in i:
            current_pathweight+=graph[k][j]
            k=j 
        current_pathweight+=graph[k][s]
        min_path=min(min_path,current_pathweight)
        
    return min_path
    
if __name__=="__main__":
    graph=[[0,10,15,20],[10,0,35,25],[15,35,0,30],[20,25,30,0]]
    s=0 
    print(travellingSalespersonProblem(graph,s))  
********************************************************** A star exp5*********************************************************************************

class Node:
    def __init__(self,data,level,fval):
        """ Initialize the node with the data, level of the node and the calculated fvalue """
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        """ Generate child nodes from the given node by moving the blank space
            either in the four directions {up,down,left,right} """
        x,y = self.find(self.data,'_')
        """ val_list contains position values for moving the blank space in either of
            the 4 directions [up,down,left,right] respectively. """
        val_list = [[x,y-1],[x,y+1],[x-1,y],[x+1,y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data,x,y,i[0],i[1])
            if child is not None:
                child_node = Node(child,self.level+1,0)
                children.append(child_node)
        return children
        
    def shuffle(self,puz,x1,y1,x2,y2):
        """ Move the blank space in the given direction and if the position value are out
            of limits the return None """
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puz = []
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None
            

    def copy(self,root):
        """ Copy function to create a similar matrix of the given node"""
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp    
            
    def find(self,puz,x):
        """ Specifically used to find the position of the blank space """
        for i in range(0,len(self.data)):
            for j in range(0,len(self.data)):
                if puz[i][j] == x:
                    return i,j


class Puzzle:
    def __init__(self,size):
        """ Initialize the puzzle size by the specified size,open and closed lists to empty """
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        """ Accepts the puzzle from the user """
        puz = []
        for i in range(0,self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self,start,goal):
        """ Heuristic Function to calculate hueristic value f(x) = h(x) + g(x) """
        return self.h(start.data,goal)+start.level

    def h(self,start,goal):
        """ Calculates the different between the given puzzles """
        temp = 0
        for i in range(0,self.n):
            for j in range(0,self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp
        

    def process(self):
        """ Accept Start and Goal Puzzle state"""
        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")        
        goal = self.accept()

        start = Node(start,0,0)
        start.fval = self.f(start,goal)
        """ Put the start node in the open list"""
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("")
            print("  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                for j in i:
                    print(j,end=" ")
                print("")
            """ If the difference between current and goal node is 0 we have reached the goal node"""
            if(self.h(cur.data,goal) == 0):
                break
            for i in cur.generate_child():
                i.fval = self.f(i,goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]

            """ sort the opne list based on f value """
            self.open.sort(key = lambda x:x.fval,reverse=False)


puz = Puzzle(3)
puz.process()